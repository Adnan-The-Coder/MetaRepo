"use client";
import React, { useEffect, useState } from 'react';

const Background = () => {
  const [dots, setDots] = useState([]);
  
  // Generate dots in a grid pattern
  useEffect(() => {
    const generateDots = () => {
      const dotsArray = [];
      const spacing = 60; // Space between dots
      const rows = Math.ceil(window.innerHeight / spacing) + 2;
      const cols = Math.ceil(window.innerWidth / spacing) + 2;
      
      for (let row = 0; row < rows; row++) {
        for (let col = 0; col < cols; col++) {
          dotsArray.push({
            id: `${row}-${col}`,
            x: col * spacing,
            y: row * spacing,
            glowing: Math.random() < 0.1, // 10% chance to start glowing
            delay: Math.random() * 5000, // Random delay for animation
          });
        }
      }
      
      setDots(dotsArray);
    };
    
    generateDots();
    
    // Regenerate dots on window resize
    const handleResize = () => {
      generateDots();
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  // Randomly toggle dot glow states
  useEffect(() => {
    const interval = setInterval(() => {
      setDots(prevDots => 
        prevDots.map(dot => ({
          ...dot,
          glowing: Math.random() < 0.08 ? !dot.glowing : dot.glowing
        }))
      );
    }, 2000);
    
    return () => clearInterval(interval);
  }, []);
  
  return (
    <div className="fixed inset-0 overflow-hidden bg-black -z-10">
      <style jsx>{`
        @keyframes glow {
          0%, 100% {
            opacity: 0.3;
            transform: scale(1);
            box-shadow: 0 0 5px #00ffaa, 0 0 10px #00ffaa, 0 0 15px #00ffaa;
          }
          50% {
            opacity: 1;
            transform: scale(1.2);
            box-shadow: 0 0 10px #00ffaa, 0 0 20px #00ffaa, 0 0 30px #00ffaa, 0 0 40px #00ffaa;
          }
        }
        
        @keyframes pulse {
          0%, 100% {
            opacity: 0.2;
          }
          50% {
            opacity: 0.6;
          }
        }
        
        .dot {
          position: absolute;
          width: 3px;
          height: 3px;
          background-color: #00ffaa;
          border-radius: 50%;
          opacity: 0.2;
          transition: all 0.3s ease-in-out;
        }
        
        .dot.glowing {
          animation: glow 3s ease-in-out infinite;
        }
        
        .dot.pulsing {
          animation: pulse 4s ease-in-out infinite;
        }
        
        /* Grid lines effect */
        .grid-overlay {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          opacity: 0.05;
          background-image: 
            linear-gradient(rgba(0, 255, 170, 0.1) 1px, transparent 1px),
            linear-gradient(90deg, rgba(0, 255, 170, 0.1) 1px, transparent 1px);
          background-size: 60px 60px;
        }
      `}</style>
      
      {/* Grid overlay for subtle mesh effect */}
      <div className="grid-overlay"></div>
      
      {/* Dots */}
      {dots.map((dot) => (
        <div
          key={dot.id}
          className={`dot ${dot.glowing ? 'glowing' : Math.random() < 0.3 ? 'pulsing' : ''}`}
          style={{
            left: `${dot.x}px`,
            top: `${dot.y}px`,
            animationDelay: `${dot.delay}ms`,
          }}
        />
      ))}
      
      {/* Additional atmospheric effects */}
      <div className="absolute inset-0 bg-gradient-radial from-transparent via-black/50 to-black opacity-60"></div>
      
      {/* Floating particles for extra ambiance */}
      <div className="absolute inset-0">
        {Array.from({ length: 20 }).map((_, i) => (
          <div
            key={i}
            className="absolute w-1 h-1 bg-cyan-400/30 rounded-full animate-pulse"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 5}s`,
              animationDuration: `${3 + Math.random() * 4}s`,
            }}
          />
        ))}
      </div>
    </div>
  );
};

export default Background;

