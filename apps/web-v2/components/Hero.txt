"use client";
import React, { useState, useEffect, useRef } from 'react';

const Hero = () => {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [leftTerminalLines, setLeftTerminalLines] = useState([]);
  const [rightSystemStats, setRightSystemStats] = useState({
    cpu: 0,
    memory: 0,
    network: 0,
    processes: []
  });
  const canvasRef = useRef(null);
  const animationRef = useRef(null);

  const commandSets = [
    // Development workflow
    [
      { text: '$ git status', delay: 1000, color: 'text-slate-400' },
      { text: 'On branch main', delay: 500, color: 'text-green-400' },
      { text: 'Your branch is up to date with origin/main', delay: 300, color: 'text-slate-300' },
      { text: '$ npm run dev', delay: 1200, color: 'text-slate-400' },
      { text: '> next dev', delay: 400, color: 'text-blue-400' },
      { text: 'ready - started server on 0.0.0.0:3000', delay: 800, color: 'text-green-400' },
      { text: 'event - compiled client and server', delay: 600, color: 'text-cyan-400' },
      { text: 'wait  - compiling...', delay: 400, color: 'text-yellow-400' },
      { text: 'event - compiled successfully', delay: 700, color: 'text-green-400' }
    ],
    // Docker operations
    [
      { text: '$ docker build -t portfolio:latest .', delay: 1000, color: 'text-slate-400' },
      { text: 'Sending build context to Docker daemon  2.048kB', delay: 300, color: 'text-slate-300' },
      { text: 'Step 1/8 : FROM node:18-alpine', delay: 500, color: 'text-blue-400' },
      { text: '---> 9ac9bb456bb0', delay: 200, color: 'text-slate-300' },
      { text: 'Step 2/8 : WORKDIR /app', delay: 400, color: 'text-blue-400' },
      { text: '---> Running in f2d8c1e4a5b3', delay: 300, color: 'text-slate-300' },
      { text: '---> b8e6f2a1c9d4', delay: 200, color: 'text-slate-300' },
      { text: 'Successfully built b8e6f2a1c9d4', delay: 800, color: 'text-green-400' },
      { text: 'Successfully tagged portfolio:latest', delay: 400, color: 'text-green-400' }
    ],
    // System monitoring
    [
      { text: '$ kubectl get pods', delay: 1000, color: 'text-slate-400' },
      { text: 'NAME                          READY   STATUS    RESTARTS', delay: 400, color: 'text-cyan-400' },
      { text: 'portfolio-app-7d9b8c5f4-x2m1n   1/1     Running   0', delay: 300, color: 'text-green-400' },
      { text: 'portfolio-app-7d9b8c5f4-y3n2p   1/1     Running   0', delay: 300, color: 'text-green-400' },
      { text: '$ kubectl logs -f portfolio-app-7d9b8c5f4-x2m1n', delay: 1200, color: 'text-slate-400' },
      { text: '2024-09-26T10:15:30.123Z [INFO] Server started', delay: 500, color: 'text-green-400' },
      { text: '2024-09-26T10:15:31.456Z [INFO] Database connected', delay: 400, color: 'text-green-400' },
      { text: '2024-09-26T10:15:32.789Z [INFO] Ready to accept requests', delay: 600, color: 'text-cyan-400' }
    ],
    // Database operations
    [
      { text: '$ psql -U admin -d portfolio', delay: 1000, color: 'text-slate-400' },
      { text: 'psql (14.9)', delay: 400, color: 'text-slate-300' },
      { text: 'Type "help" for help.', delay: 300, color: 'text-slate-300' },
      { text: 'portfolio=# SELECT * FROM users LIMIT 5;', delay: 1200, color: 'text-purple-400' },
      { text: ' id |   name   |     email     | created_at', delay: 400, color: 'text-cyan-400' },
      { text: '----+----------+---------------+------------', delay: 200, color: 'text-cyan-400' },
      { text: '  1 | john_doe | john@test.com | 2024-01-15', delay: 300, color: 'text-slate-300' },
      { text: '  2 | jane_dev | jane@test.com | 2024-01-16', delay: 300, color: 'text-slate-300' },
      { text: '(2 rows)', delay: 400, color: 'text-green-400' }
    ]
  ];

  const processes = [
    'node /app/server.js',
    'nginx: master process',
    'postgres: main process',
    'redis-server *:6379',
    'docker-compose up',
    'kubectl proxy',
    'prometheus --config.file',
    'grafana-server --config'
  ];

  // Background terminal animation
  useEffect(() => {
    let currentSet = 0;
    let currentCommand = 0;
    let timeoutId;

    const executeCommands = () => {
      const commandSet = commandSets[currentSet];
      const command = commandSet[currentCommand];

      setLeftTerminalLines(prev => [...prev, command].slice(-15)); // Keep last 15 lines

      currentCommand++;
      if (currentCommand >= commandSet.length) {
        currentCommand = 0;
        currentSet = (currentSet + 1) % commandSets.length;
        timeoutId = setTimeout(executeCommands, 2000); // Pause between sets
      } else {
        timeoutId = setTimeout(executeCommands, command.delay);
      }
    };

    executeCommands();

    return () => clearTimeout(timeoutId);
  }, []);

  // System stats animation
  useEffect(() => {
    const updateStats = () => {
      setRightSystemStats(prev => ({
        cpu: Math.max(10, Math.min(95, prev.cpu + (Math.random() - 0.5) * 20)),
        memory: Math.max(20, Math.min(90, prev.memory + (Math.random() - 0.5) * 15)),
        network: Math.max(0, Math.min(100, prev.network + (Math.random() - 0.5) * 30)),
        processes: processes.sort(() => 0.5 - Math.random()).slice(0, 6)
      }));
    };

    // Initialize with random values
    setRightSystemStats({
      cpu: 45 + Math.random() * 30,
      memory: 60 + Math.random() * 20,
      network: 30 + Math.random() * 40,
      processes: processes.slice(0, 6)
    });

    const interval = setInterval(updateStats, 1500);
    return () => clearInterval(interval);
  }, []);

  // Geometric background animation
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    const updateCanvasSize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };
    
    updateCanvasSize();
    window.addEventListener('resize', updateCanvasSize);

    let time = 0;
    
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      time += 0.008;
      
      // Central geometric pattern
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      
      // Rotating hexagonal grid
      for (let ring = 1; ring <= 3; ring++) {
        const hexCount = ring * 6;
        for (let i = 0; i < hexCount; i++) {
          const angle = (i / hexCount) * Math.PI * 2 + time * (ring % 2 === 0 ? 1 : -1);
          const radius = ring * 80 + Math.sin(time * 2 + ring) * 20;
          const x = centerX + Math.cos(angle) * radius;
          const y = centerY + Math.sin(angle) * radius;
          
          ctx.save();
          ctx.translate(x, y);
          ctx.rotate(time + i);
          
          // Draw hexagon
          ctx.beginPath();
          for (let j = 0; j < 6; j++) {
            const hexAngle = (j / 6) * Math.PI * 2;
            const hexX = Math.cos(hexAngle) * 12;
            const hexY = Math.sin(hexAngle) * 12;
            if (j === 0) ctx.moveTo(hexX, hexY);
            else ctx.lineTo(hexX, hexY);
          }
          ctx.closePath();
          ctx.strokeStyle = `rgba(0, 255, 255, ${0.1 + Math.sin(time + i) * 0.05})`;
          ctx.lineWidth = 1;
          ctx.stroke();
          
          ctx.restore();
        }
      }
      
      // Central pulsing core
      ctx.save();
      ctx.translate(centerX, centerY);
      ctx.rotate(time * 0.3);
      
      const coreRadius = 40 + Math.sin(time * 2) * 8;
      ctx.beginPath();
      for (let i = 0; i < 8; i++) {
        const angle = (i / 8) * Math.PI * 2;
        const x = Math.cos(angle) * coreRadius;
        const y = Math.sin(angle) * coreRadius;
        if (i === 0) ctx.moveTo(x, y);
        else ctx.lineTo(x, y);
      }
      ctx.closePath();
      ctx.strokeStyle = `rgba(0, 255, 255, ${0.4 + Math.sin(time * 3) * 0.2})`;
      ctx.lineWidth = 2;
      ctx.stroke();
      ctx.restore();
      
      animationRef.current = requestAnimationFrame(animate);
    };
    
    animate();

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      window.removeEventListener('resize', updateCanvasSize);
    };
  }, []);

  useEffect(() => {
    const handleMouseMove = (e) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };

    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, []);

  return (
    <div className="relative min-h-screen bg-black overflow-hidden">
      {/* Animated geometric background */}
      <canvas
        ref={canvasRef}
        className="absolute inset-0 z-0"
      />

      {/* Gradient overlays */}
      <div className="absolute inset-0 bg-gradient-to-br from-slate-900/60 via-transparent to-slate-900/60 z-5" />

      {/* Mouse cursor glow effect */}
      <div
        className="fixed w-48 h-48 rounded-full pointer-events-none z-10 transition-all duration-700 ease-out opacity-40"
        style={{
          background: 'radial-gradient(circle, rgba(0,255,255,0.12) 0%, transparent 70%)',
          transform: `translate(${mousePosition.x - 96}px, ${mousePosition.y - 96}px)`,
        }}
      />

      {/* Left side - Background terminal commands */}
      <div className="absolute left-4 top-1/2 transform -translate-y-1/2 w-80 z-10">
        <div className="bg-black/40 backdrop-blur-sm rounded-lg border border-slate-800/50 p-4 font-mono text-xs overflow-hidden">
          <div className="text-slate-500 mb-2">~/portfolio $</div>
          <div className="space-y-1">
            {leftTerminalLines.map((line, index) => (
              <div 
                key={index}
                className={`${line.color} opacity-80 transition-opacity duration-500`}
                style={{ 
                  animation: `fadeInUp 0.5s ease-out`,
                  animationFillMode: 'both',
                  animationDelay: `${index * 0.1}s`
                }}
              >
                {line.text}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Right side - System stats */}
      <div className="absolute right-4 top-1/2 transform -translate-y-1/2 w-72 z-10 space-y-4">
        {/* CPU Usage */}
        <div className="bg-black/40 backdrop-blur-sm rounded-lg border border-slate-800/50 p-4">
          <div className="text-cyan-400 font-mono text-xs mb-2 flex items-center">
            <div className="w-2 h-2 bg-cyan-400 rounded-full mr-2 animate-pulse" />
            CPU USAGE
          </div>
          <div className="flex items-center justify-between text-xs font-mono text-slate-300 mb-1">
            <span>CORES: 8</span>
            <span>{Math.round(rightSystemStats.cpu)}%</span>
          </div>
          <div className="w-full bg-slate-800 rounded-full h-2">
            <div 
              className="bg-gradient-to-r from-cyan-400 to-blue-500 h-2 rounded-full transition-all duration-1000"
              style={{ width: `${rightSystemStats.cpu}%` }}
            />
          </div>
        </div>

        {/* Memory Usage */}
        <div className="bg-black/40 backdrop-blur-sm rounded-lg border border-slate-800/50 p-4">
          <div className="text-purple-400 font-mono text-xs mb-2 flex items-center">
            <div className="w-2 h-2 bg-purple-400 rounded-full mr-2 animate-pulse" />
            MEMORY
          </div>
          <div className="flex items-center justify-between text-xs font-mono text-slate-300 mb-1">
            <span>16GB</span>
            <span>{Math.round(rightSystemStats.memory)}%</span>
          </div>
          <div className="w-full bg-slate-800 rounded-full h-2">
            <div 
              className="bg-gradient-to-r from-purple-400 to-pink-500 h-2 rounded-full transition-all duration-1000"
              style={{ width: `${rightSystemStats.memory}%` }}
            />
          </div>
        </div>

        {/* Network Activity */}
        <div className="bg-black/40 backdrop-blur-sm rounded-lg border border-slate-800/50 p-4">
          <div className="text-green-400 font-mono text-xs mb-2 flex items-center">
            <div className="w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse" />
            NETWORK I/O
          </div>
          <div className="space-y-2">
            <div className="flex justify-between text-xs font-mono text-slate-300">
              <span>↑ OUT</span>
              <span>{Math.round(rightSystemStats.network * 0.7)} MB/s</span>
            </div>
            <div className="flex justify-between text-xs font-mono text-slate-300">
              <span>↓ IN</span>
              <span>{Math.round(rightSystemStats.network * 1.2)} MB/s</span>
            </div>
          </div>
        </div>

        {/* Running Processes */}
        <div className="bg-black/40 backdrop-blur-sm rounded-lg border border-slate-800/50 p-4">
          <div className="text-yellow-400 font-mono text-xs mb-2 flex items-center">
            <div className="w-2 h-2 bg-yellow-400 rounded-full mr-2 animate-pulse" />
            PROCESSES
          </div>
          <div className="space-y-1">
            {rightSystemStats.processes.slice(0, 4).map((process, index) => (
              <div key={index} className="text-xs font-mono text-slate-400 truncate">
                {process}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="relative z-20 flex flex-col items-center justify-center min-h-screen px-6">
        
        {/* Status bar */}
        <div className="absolute top-8 left-1/2 transform -translate-x-1/2 flex items-center space-x-4 text-xs font-mono text-slate-400">
          <div className="flex items-center space-x-2">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
            <span>SYSTEM ONLINE</span>
          </div>
          <span>|</span>
          <span>PORT:3000</span>
          <span>|</span>
          <span>BUILD:PROD</span>
        </div>

        {/* Main heading */}
        <div className="text-center mb-12">
          <h1 className="text-6xl md:text-8xl lg:text-9xl font-black tracking-tight mb-4">
            <span className="bg-gradient-to-r from-white via-slate-200 to-slate-400 bg-clip-text text-transparent">
              Adnan
            </span>
          </h1>
          <h2 className="text-2xl md:text-3xl font-light tracking-[0.3em] text-slate-300 mb-8">
            FULL STACK DEVELOPER
          </h2>
          
          <p className="text-lg text-slate-400 max-w-2xl mx-auto leading-relaxed">
            Architecting scalable solutions with cutting-edge technologies
          </p>
        </div>

        {/* CTA Buttons */}
        <div className="flex gap-6 mb-16">
          <button className="px-8 py-4 bg-white text-black font-semibold rounded-lg hover:bg-slate-200 transition-all duration-300 hover:scale-105 hover:shadow-xl">
            Explore Projects
          </button>
          
          <button className="px-8 py-4 border border-slate-600 text-slate-300 font-semibold rounded-lg hover:border-slate-400 hover:text-white transition-all duration-300 hover:scale-105">
            Connect
          </button>
        </div>

        {/* Scroll indicator */}
        <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2">
          <div className="flex flex-col items-center space-y-2 text-slate-500 animate-bounce">
            <span className="text-xs font-mono">SCROLL</span>
            <div className="w-px h-8 bg-slate-500" />
          </div>
        </div>
      </div>

      {/* Corner tech decorations */}
      <div className="absolute top-0 left-0 w-20 h-20 border-l border-t border-slate-700/50" />
      <div className="absolute top-0 right-0 w-20 h-20 border-r border-t border-slate-700/50" />
      <div className="absolute bottom-0 left-0 w-20 h-20 border-l border-b border-slate-700/50" />
      <div className="absolute bottom-0 right-0 w-20 h-20 border-r border-b border-slate-700/50" />

      <style jsx>{`
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 0.8;
            transform: translateY(0);
          }
        }
      `}</style>
    </div>
  );
};

export default Hero;